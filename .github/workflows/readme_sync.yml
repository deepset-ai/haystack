name: Sync docs with Readme

on:
  pull_request:
    paths:
      - "docs/pydoc/**"
  push:
    branches:
      - main
      # release branches have the form v1.9.x
      - "v[0-9]+.[0-9]+.x"
      # Exclude 1.x release branches, there's another workflow handling those
      - "!v1.[0-9]+.x"

env:
  HATCH_VERSION: "1.13.0"
  PYTHON_VERSION: "3.10"

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Hatch
        run: pip install hatch==${{ env.HATCH_VERSION }}

      - name: Generate API docs
        env:
          # This is necessary to fetch the documentation categories
          # from Readme.io as we need them to associate the slug
          # in config files with their id.
          README_API_KEY: ${{ secrets.README_API_KEY }}
        # The command is a bit misleading, we're not actually syncing anything here,
        # we're just generating the markdown files from the yaml configs.
        run: hatch run readme:sync

      - name: Get version
        id: version-getter
        run: |
          VERSION="$(hatch version | cut -d '.' -f 1,2)"
          # The first stable documentation on Readme for a version is created when
          # the first x.x.0 version is released.
          # Up until that point we need to push to an "-unstable" suffixed version.
          # This also means that following RCs for patch releases are pushed to the
          # stable docs, for the time being we're ok with that.
          # `main` branch docs will be handled correctly too and get pushed to an
          # unstable documentation.
          IS_UNSTABLE=$(hatch version | grep -v -q "0-rc")
          if [ "$IS_UNSTABLE" ]; then
            VERSION="$VERSION-unstable"
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Sync docs
        if: github.event_name == 'push'
        uses: readmeio/rdme@v8
        with:
          rdme: docs ./docs/pydoc/temp --key=${{ secrets.README_API_KEY }} --version=${{ steps.version-getter.outputs.version }}

      - name: Delete outdated
        if: github.event_name == 'push'
        env:
          README_API_KEY: ${{ secrets.README_API_KEY }}
        run: hatch run readme:delete-outdated  --version="${{ steps.version-getter.outputs.version }}" --config-path ./docs/pydoc/config
